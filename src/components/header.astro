---
import { pages } from "../consts/Pages";
---

<header
    class="fixed flex flex-col items-center justify-center w-full mx-auto mt-2"
>
    <nav
        class="flex rounded-full justify-evenly sm:justify-center text-paragraph m-5"
    >
        {
            pages.map(({ disabled, name, href, label, status }) => (
                <>
                    <a
                        href={href}
                        class:list={[
                            "nav-item flex h-full select-none flex-col items-center justify-center gap-1 text-center sm:text-xl text-lg sm:px-7 font-bold mx-3 sm:mx-0",
                            { "pointer-events-none": disabled },
                        ]}
                        aria-label={label}
                    >
                        {name}
                        {status && (
                            <span class="text-xs text-accent">{status}</span>
                        )}
                    </a>
                </>
            ))
        }
    </nav>

    <div class="flex w-full" id="separator-line">
        <div
            class="h-[2px] w-full rounded-l-[30%] border-t-0"
            style="background:linear-gradient(to right, transparent 3%, white 35%, white 100%)"
        >
        </div>
        <div
            class="h-[2px] w-full rounded-r-[30%] border-t-0 bg-white"
            style="background:linear-gradient(to left, transparent 3%, white 35%, white 100%);"
        >
        </div>
    </div>

    <script>
        const sections = document.querySelectorAll("section");
        const navItems = document.querySelectorAll(".nav-item");
        const line = document.getElementById("separator-line");
        const nav = document.querySelector("nav");

        const callback = (entries: any[]) => {
            entries.forEach((entry) => {
                if (entry.isIntersecting) {
                    navItems.forEach((item) => {
                        if (
                            item.getAttribute("aria-label") == entry.target.id
                        ) {
                            item.classList.add("text-headline");
                        } else {
                            item.classList.remove("text-headline");
                        }
                    });
                }
            });
        };

        const observer = new IntersectionObserver(callback, {
            rootMargin: "0px",
            threshold: 0.5,
        });

        sections.forEach((section) => {
            observer.observe(section);
        });

        window.addEventListener("scroll", () => {
            // agregar opacidad al line-separator
            line?.classList.toggle("opacity-0", window.scrollY > 10);

            nav?.classList.toggle("bg-[#1b1432]", window.scrollY > 10);
        });
    </script>
</header>

<style>
    .nav-item:hover {
        color: var(--headline);
    }
    nav {
        transition: background 0.5s;
    }
    #separator-line {
        transition: opacity 0.5s;
    }
</style>
